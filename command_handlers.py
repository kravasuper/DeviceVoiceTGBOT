from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext
from machines_views import get_machines, get_events_id
import httpx
from bot_config import logger, ADMIN_ID


async def start_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—à–∏–º API.')


async def id_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id.
    –í–æ–∑–≤—Ä–∞—â–∞e—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.message.from_user.id
    await update.message.reply_text(f"–í–∞—à ID: {user_id}")


async def help_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
    """
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    await update.message.reply_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")


async def button(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query
    await query.answer()
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ ID –º–∞—à–∏–Ω—ã
        response = await get_events_id(int(query.data))  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ query.data —Å–æ–¥–µ—Ä–∂–∏—Ç ID –º–∞—à–∏–Ω—ã
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö
        machine_events = response.get("items", [])
        if not machine_events:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
            return
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        event_messages = []
        for event in machine_events:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–æ—á–∫–∏ –∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫–∞
            status_icon = (
                "‚úîÔ∏è" if event['type'] == "SOLVED" else
                "‚ùì" if event['type'] == "UNKNOWN" else
                "üîÑ" if event['type'] == "ACTIVE" else
                "‚ÑπÔ∏è" if event['type'] == "INFO" else
                "‚ùå"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            )
            event_message = (
                f"{status_icon} {event['name']}\n"
                f"–ö–æ–¥: {event['code']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                f"–í—Ä–µ–º—è: {event['receive_server_time']}\n"
                # f"–ú–∞—à–∏–Ω–∞: {event['machine']['title']}\n"
                #f"–ê–¥—Ä–µ—Å: {event['location']['extra'][0]['value']}\n"
                f"---\n"
            )
            event_messages.append(event_message)
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ
        message_text = "\n".join(event_messages)
        # –î–æ–±–∞–≤–ª–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        await query.edit_message_text(f"–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π  {machine_events[0]['machine']['title']}:\n\n{message_text}",
                                      reply_markup=reply_markup)
    except httpx.RequestError as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
    except Exception as e:
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def go_back(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    query = update.callback_query
    await query.answer()
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # await query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è. /machines")
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é machines_command, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç update
    await machines_command(update, context)


from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import httpx


async def machines_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /machines.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    query = update.callback_query
    if query:
        await query.answer()

    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ message, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ update.message, —Ç–∞–∫ –∏ update.callback_query.message
        message = update.message if update.message else update.callback_query.message

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω
        response = await get_machines()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö
        machine_states = response.get("machine_states", {})
        if not machine_states:
            await message.reply_text("–°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω –ø—É—Å—Ç.")
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = []
        html_text = "/machines\n"
        html_text += "<pre>"
        for state in ["error", "bad", "good"]:
            for machine in machine_states.get(state, []):
                status_icon = (
                    "‚úîÔ∏è" if machine["status"] == "OK" else
                    "‚ùå" if machine["status"] == "OFFLINE" else
                    "‚ö†Ô∏è" if machine["status"] == "WARNING" else
                    "‚ùì" if machine["status"] == "UNKNOWN" else
                    "üÜò"
                )

                gsm_time = machine["gsm_time"]
                time_part = gsm_time.split(" ")[1]

                gsm_status = f"üì∂ {machine['gsm_level']}% [{time_part}]"
                time_err = machine.get("timeErr", "")
                alarm_time = f"‚è∞ {time_err}" if time_err else ""

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                html_text += f"{status_icon} {machine['name']:<13} {gsm_status:<5} {alarm_time}\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard.append([
                    InlineKeyboardButton(f"{machine['name']}", callback_data=str(machine['id']))
                ])

        html_text += "</pre>"

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.reply_text(html_text, parse_mode="HTML", reply_markup=reply_markup)

    except httpx.RequestError as e:
        if message:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—à–∏–Ω: {str(e)}")
    except Exception as e:
        if message:
            await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


